pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = "registry.datalabserasaexperian.com.br"
        DOCKER_IMAGE = "agribusiness/agrowatch-core/pb-aws-api"
        DOCKER_TAG = "${BRANCH_NAME}-${BUILD_NUMBER}"
        NAMESPACE = "agrowatch-core"
        HELM_RELEASE_NAME = "pb-aws-api"
        TERRAFORM_PATH = "eks/terraform"
        KUBECONFIG_PATH = "/var/lib/jenkins/.kube/config-agro"

    }
    tools {
        terraform '1.2.7'
    }
    stages {
        stage('Build Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'uat'
                    branch 'dev'
                }
            }
            steps {
                script {
                    def branchTag = "${BRANCH_NAME}-${BUILD_NUMBER}"

                    sh "docker build --no-cache -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${branchTag} ."
                }
            }
        }
        stage('Push Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'uat'
                    branch 'dev'
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKER_REPOSITORY', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "echo $PASSWORD | docker login ${DOCKER_REGISTRY} -u ${USERNAME} --password-stdin"
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BRANCH_NAME}-${BUILD_NUMBER}"
                }
            }
        }
        stage('Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'uat'
                    branch 'dev'
                }
            }
            steps {
                script {
                    def env = ''
                    def clusterName = ""

                    if (BRANCH_NAME == 'main') {
                        env = 'prod'
                        clusterName = "agribusiness-eks-${env}"
						profile = "eec-agribusiness-${env}"
                    } else if (BRANCH_NAME == 'uat') {
                        env = 'uat'
                        clusterName = "agribusiness-eks-${env}"
                        profile = "eec-agribusiness-${env}"
                    } else if (BRANCH_NAME == 'dev') {
                        env = 'dev'
                        clusterName = "agribusiness-eks-${env}"
                        profile = "eec-agribusiness-${env}"
                    }
                  // Atualiza o valor da tag no arquivo values
                  sh "sed -i 's|tag: latest|tag: ${DOCKER_TAG}|' eks/helm/${env}/values.yaml"
                  sh "AWS_REGION=sa-east-1 AWS_PROFILE=${profile} aws eks update-kubeconfig --name ${clusterName} --kubeconfig ${KUBECONFIG_PATH}"	
                  sh(script: "cd ${TERRAFORM_PATH} && AWS_REGION=sa-east-1 AWS_PROFILE=${profile} terraform init -upgrade -backend-config=backend-config/${env}.tf", returnStdout: true).trim()
                  sh(script: "cd ${TERRAFORM_PATH} && AWS_REGION=sa-east-1 AWS_PROFILE=${profile} terraform apply -auto-approve -var-file=variables-${env}.tfvars", returnStdout: true).trim()	
                }
            }
        }
        stage('Validate Deployment') {
            when {
                anyOf {
                    branch 'main'
                    branch 'uat'
                    branch 'dev'
                }
            }
            steps {
                script {
                    def timeout = 300  // tempo de espera em segundos
                    def sleepTime = 20 // intervalo entre verificações em segundos
                    def iterations = timeout / sleepTime
                    def allPodsRunning = false

                    for (int i = 0; i < iterations; i++) {
                        def getPods = sh(script: "kubectl get pods -n ${NAMESPACE} --selector=app=${HELM_RELEASE_NAME} -o jsonpath='{.items[*].status.phase}' --kubeconfig ${KUBECONFIG_PATH}", returnStdout: true).trim()
                        
                        def podStatuses = getPods.split(' ')
                        
                        if (podStatuses.every { it == 'Running' }) {
                            allPodsRunning = true
                            echo "All pods are running."
                            break
                        } else {
                            echo "Waiting for all pods to be running. Current statuses: ${getPods}"
                        }

                        sleep time: sleepTime, unit: 'SECONDS'
                    }

                    if (!allPodsRunning) {
                        error("Validation failed. Not all pods are in 'Running' state.")
                    }
                }
            }
        }
    }
}
