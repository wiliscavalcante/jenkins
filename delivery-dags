pipeline {
    agent any
    environment {
        NAMESPACE = "airflow"
        REPO_NAME = '' // Será definido dinamicamente no estágio de preparação
        KUBECONFIG_PATH = '' // Deve ser definido no Jenkins ou passado como um parâmetro
        GLOBAL_ENV = '' // Será definido dinamicamente com base no nome da branch
    }
    stages {
        stage('Preparation') {
            steps {
                script {
                    try {
                        echo 'Tentando extrair o nome do repositório...'
                        REPO_NAME = sh(script: 'basename -s .git `git config --get remote.origin.url`', returnStdout: true).trim()
                        echo "Nome do repositório: ${REPO_NAME}"

                        echo 'Tentando compactar o repositório...'
                        sh 'tar -czvf repo.tar.gz .'
                        echo 'Repositório compactado com sucesso.'
                    } catch (Exception e) {
                        echo "Erro no estágio de preparação: ${e.getMessage()}"
                        error "Falha no estágio de preparação."
                    }
                }
            }
        }
        stage('DAG Deployment') {
            when {
                anyOf {
                    branch 'main'
                    branch 'uat'
                    branch 'dev'
                }
            }
            steps {
                script {
                    def envValue = ''
                    def clusterName = ''
                    def profile = ''

                    if (BRANCH_NAME == 'main') {
                        envValue = 'prod'
                        clusterName = "agribusiness-eks-${envValue}"
                        profile = "eec-agribusiness-${envValue}"
                    } else if (BRANCH_NAME == 'uat') {
                        envValue = 'uat'
                        clusterName = "agribusiness-eks-${envValue}"
                        profile = "eec-agribusiness-${envValue}"
                    } else if (BRANCH_NAME == 'dev') {
                        envValue = 'dev'
                        clusterName = "agribusiness-eks-${envValue}"
                        profile = "eec-agribusiness-${envValue}"
                    }

                    withEnv(["GLOBAL_ENV=${envValue}"]) {
                        // Atualiza o kubeconfig
                        sh "AWS_REGION=sa-east-1 AWS_PROFILE=${profile} aws eks update-kubeconfig --name ${clusterName} --kubeconfig ${KUBECONFIG_PATH}"

                        // Teste de conectividade com o cluster
                        def nodes = sh(script: "KUBECONFIG=${KUBECONFIG_PATH} kubectl get nodes", returnStdout: true).trim()
                        echo "Nodes no cluster: \n${nodes}"

                        // Criação do Pod que apenas monta o PVC
                        writeFile file: 'pod.yaml', text: """
                        apiVersion: v1
                        kind: Pod
                        metadata:
                          name: deploy-dag-${REPO_NAME}
                          namespace: ${NAMESPACE}
                        spec:
                          containers:
                          - name: dag-deployment-container
                            image: alpine
                            command: ["/bin/sh", "-c", "--"]
                            args: ["while true; do sleep 30; done;"]
                            volumeMounts:
                            - mountPath: /dags
                              name: airflow-dags
                          volumes:
                          - name: airflow-dags
                            persistentVolumeClaim:
                              claimName: airflow-dags
                        """
                        // Inicia o Pod
                        sh "KUBECONFIG=${KUBECONFIG_PATH} kubectl apply -f pod.yaml"

                        // Aguarda o Pod ficar disponível
                        sh "KUBECONFIG=${KUBECONFIG_PATH} kubectl wait --for=condition=ready pod deploy-dag-${REPO_NAME} -n ${NAMESPACE} --timeout=600s"

                        // Checar se o diretório do repositório existe e removê-lo
                        sh "KUBECONFIG=${KUBECONFIG_PATH} kubectl exec -n ${NAMESPACE} deploy-dag-${REPO_NAME} -- /bin/sh -c 'rm -rf /dags/${REPO_NAME} && mkdir -p /dags/${REPO_NAME}'"

                        // Copiar o tarball para o diretório correto no PVC e extrair
                        sh "KUBECONFIG=${KUBECONFIG_PATH} kubectl cp repo.tar.gz ${NAMESPACE}/deploy-dag-${REPO_NAME}:/dags/${REPO_NAME}/repo.tar.gz"
                        sh "KUBECONFIG=${KUBECONFIG_PATH} kubectl exec -n ${NAMESPACE} deploy-dag-${REPO_NAME} -- /bin/sh -c 'tar -xzvf /dags/${REPO_NAME}/repo.tar.gz -C /dags/${REPO_NAME} && rm /dags/${REPO_NAME}/repo.tar.gz'"

                        // Remover o Pod após a operação
                        sh "KUBECONFIG=${KUBECONFIG_PATH} kubectl delete pod deploy-dag-${REPO_NAME} -n ${NAMESPACE}"
                    }
                }
            }
        }
    }
    post {
        always {
            // Lógica para limpeza ou notificações, se necessário
            echo 'Execução do Pipeline concluída.'
        }
    }
}
